  /*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
  
  /**
  * Defines a data model for  promiseMe
  */
  namespace com.acob.promiseme

  enum Gender {
    o M //Male
    o F //Female
  } 

  //status list
  enum Status {
    o NEW //
    o NEGOTIATING //
    o FULFILLING
    o REJECT
    o COMPLETED
    o CLOSED
    o CANCELLED
  }


  abstract participant Person identified by personId {
    o String personId
    o String firstName
    o String lastName
    o Gender gender
    o Long totalLove
    o Double balance
  }
  //couple 
  participant Couple extends Person {
    --> Couple partner
    o String partnerNickName

  }

  // asset promiseme
  asset PromiseMe identified by promiseId {
    o String promiseId
    --> Couple promiseFrom 
    --> Couple promiseTo
    --> Couple creator
    o String brief
    o String expectation
    o String result
    o DateTime deadline
    o DateTime implementTime // time of the promise is implemented
    o Double bonus //set bonus
    o Long loveRate 
    
  }
  // asset promise status
  asset PromiseStatus identified by promiseId {
    o String promiseId
    o String promiseFromId
    o String promiseToId
    o String creatorId
    o String currentId
    o String nextId
    o Status preStatus
    o Status status    
    
  }
  /**
  * Transaction to create an order
  */
  transaction Together {
    --> Couple partner1
    --> Couple partner2
  }

  /**
  * Transaction to create an Promise
  */
  transaction MakePromise {
    o String promiseFromId
    o String promiseToId
    o String creatorId
    o String brief
    o String expectation
    o Double bonus
    o Long loveRate
    o DateTime deadline
    
  }
 /**
  * Transaction to change promise status forward
  */
  transaction ChangePromiseStatus{
    o String promiseId
    o String promiseFromId
    o String promiseToId
    o String currentId
    o String newStatus
    o String message
  }
   /**
  * Transaction to change promise status forward
  */
  transaction NegotiatePromise{
    o String promiseId
    o String promiseFromId
    o String promiseToId
    o String currentId
    o String message
    o String brief
    o String expectation
    o Double bonus
    o Long loveRate
    o DateTime deadline
  }
  /**
  * Transaction to change promise status forward  again
  */
  transaction ConfirmPromise{
    o String promiseId
    o String promiseFromId 
    o String promiseToId
    o String currentId
    o String message
  }
  /**
  * Transaction to fulfill the promise by promiser
  */
  transaction FulfillPromise{
    o String promiseId
    o String promiseFromId
    o String promiseToId
    o String currentId
    o String message 
    o DateTime implementTime
  }
  
    /**
  * Transaction to complete the promise, give result 
  */
  transaction CompletePromise{
    o String promiseId
    o String promiseFromId
    o String promiseToId
    o String currentId
    o String message 
    o String result 
  }

     /**
  * Transaction to end promise , like Reject or Cancel 
  */
  transaction TerminatePromise{
    o String promiseId
    o String promiseFromId
    o String promiseToId
    o String currentId
    o String message 
    o String newStatus 
  }
